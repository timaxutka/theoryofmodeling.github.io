import numpy as np
import matplotlib.pyplot as plt
import streamlit as st

st.set_page_config(page_title="–õ–†2 ‚Äî –î–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤", page_icon="üìà")

st.title("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ2 ‚Äî –î–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ (—Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è –≥–∞—Ä–º–æ–Ω–∏–∫–∞)")
st.markdown("""
–í –¥–∞–Ω–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∏—Å—Å–ª–µ–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å **–¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤**
–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è **—Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è –≥–∞—Ä–º–æ–Ω–∏–∫–∞** –ø–æ —Å–ø–µ–∫—Ç—Ä—É –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞.
""")

# ============================================================
# --- –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–∞ ---
# ============================================================

st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–∞")

col1, col2, col3, col4 = st.columns(4)
with col1:
    func_type = st.selectbox("–§–æ—Ä–º–∞ —Å–∏–≥–Ω–∞–ª–∞",
        ["sin¬≤", "cos¬≤", "|sin|", "exp(-t)", "sin+cos", "–ø–∏–ª–æ–æ–±—Ä–∞–∑–Ω—ã–π", "—Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–π"])
with col2:
    A = st.number_input("–ê–º–ø–ª–∏—Ç—É–¥–∞ A", min_value=0.1, max_value=5.0, value=1.0, step=0.1)
with col3:
    f = st.slider("–ß–∞—Å—Ç–æ—Ç–∞ f, –ì—Ü", 1.0, 20.0, 5.0)
with col4:
    fd = st.slider("–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ f‚Çë, –ì—Ü", 20, 200, 50)

duration = st.slider("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞ (—Å)", 0.1, 2.0, 1.0)

# ============================================================
# --- —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ ---
# ============================================================

t_cont = np.linspace(0, duration, 5000)

if func_type == "sin¬≤":
    signal_cont = (A * np.sin(2*np.pi*f*t_cont))**2
elif func_type == "cos¬≤":
    signal_cont = (A * np.cos(2*np.pi*f*t_cont))**2
elif func_type == "|sin|":
    signal_cont = A * np.abs(np.sin(2*np.pi*f*t_cont))
elif func_type == "exp(-t)":
    signal_cont = A * np.exp(-2*t_cont) * np.abs(np.sin(2*np.pi*f*t_cont))
elif func_type == "sin+cos":
    signal_cont = A * (np.sin(2*np.pi*f*t_cont) + np.cos(2*np.pi*f*t_cont)) / 2 + A
elif func_type == "–ø–∏–ª–æ–æ–±—Ä–∞–∑–Ω—ã–π":
    signal_cont = A * (2*(t_cont*f - np.floor(0.5 + t_cont*f))) + A
elif func_type == "—Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–π":
    signal_cont = A * (2*np.abs(2*(t_cont*f - np.floor(t_cont*f + 0.5))) - 1) + A
else:
    signal_cont = np.zeros_like(t_cont)

# –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚â• 0
signal_cont = np.clip(signal_cont, 0, None)

# --- –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è ---
t_disc = np.arange(0, duration, 1/fd)
signal_disc = np.interp(t_disc, t_cont, signal_cont)

# ============================================================
# --- –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (—Ä—è–¥ –ö–æ—Ç–µ–ª—å–Ω–∏–∫–æ–≤–∞ —á–µ—Ä–µ–∑ sinc) ---
# ============================================================
def sinc_reconstruction(t, t_disc, samples, fd):
    reconstructed = np.zeros_like(t)
    for k in range(len(samples)):
        reconstructed += samples[k] * np.sinc(fd * (t - t_disc[k]))
    return reconstructed

signal_recon = sinc_reconstruction(t_cont, t_disc, signal_disc, fd)

# ============================================================
# --- —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ---
# ============================================================
N = len(signal_disc)
freqs = np.fft.fftfreq(N, d=1/fd)
spectrum = np.abs(np.fft.fft(signal_disc)) / N
mask = freqs >= 0
freqs, spectrum = freqs[mask], spectrum[mask]
dominant_freq = freqs[np.argmax(spectrum)]
dominant_amp = np.max(spectrum)

# ============================================================
# --- –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
# ============================================================
st.markdown("---")
st.subheader("–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è –≥–∞—Ä–º–æ–Ω–∏–∫–∞")
st.write(f"**–ß–∞—Å—Ç–æ—Ç–∞:** {dominant_freq:.2f} –ì—Ü")
st.write(f"**–ê–º–ø–ª–∏—Ç—É–¥–∞:** {dominant_amp:.3f}")

# ============================================================
# --- –≥—Ä–∞—Ñ–∏–∫–∏ ---
# ============================================================
tab1, tab2 = st.tabs(["üìâ –°–∏–≥–Ω–∞–ª—ã", "üìä –°–ø–µ–∫—Ç—Ä"])

with tab1:
    fig, ax = plt.subplots(figsize=(10,5))
    ax.plot(t_cont, signal_cont, label="–ò—Å—Ö–æ–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π)")
    ax.stem(t_disc, signal_disc, linefmt='r-', markerfmt='ro', basefmt=" ", label="–û—Ç—Å—á—ë—Ç—ã (–¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è)")
    ax.plot(t_cont, signal_recon, 'g--', label="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–ö–æ—Ç–µ–ª—å–Ω–∏–∫–æ–≤)")
    ax.set_xlabel("–í—Ä–µ–º—è, —Å")
    ax.set_ylabel("–ê–º–ø–ª–∏—Ç—É–¥–∞")
    ax.grid(True)
    ax.legend()
    st.pyplot(fig)

with tab2:
    fig2, ax2 = plt.subplots(figsize=(10,4))
    ax2.plot(freqs, spectrum, label="–ê–º–ø–ª–∏—Ç—É–¥–Ω—ã–π —Å–ø–µ–∫—Ç—Ä")
    ax2.axvline(dominant_freq, color='red', linestyle='--', label=f"–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è –≥–∞—Ä–º–æ–Ω–∏–∫–∞ ({dominant_freq:.2f} –ì—Ü)")
    ax2.set_xlabel("–ß–∞—Å—Ç–æ—Ç–∞, –ì—Ü")
    ax2.set_ylabel("–ê–º–ø–ª–∏—Ç—É–¥–∞")
    ax2.grid(True)
    ax2.legend()
    st.pyplot(fig2)
